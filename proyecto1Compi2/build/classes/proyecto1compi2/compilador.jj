/*
public void analizar(String cadena)  throws ParseException {
        try{
            Analizador parser = new Analizador(new StringReader(cadena));
            parser.Input();
            System.out.println("Analisis exitoso.");
        }catch(ParseException e){
            System.out.println(e.getMessage());
            System.out.println("Analizador: Se encontraron errores en el analisis.");
        }
    }

*/

options {
  STATIC = false;
}

PARSER_BEGIN(compilador)
package proyecto1compi2;


import java.io.StringReader;
import java.util.ArrayList;

class compilador 
{
	int contador=0;
	NodoArbol root = new NodoArbol();
	public String getEtiqueta(){

		contador++;
		String etiqueta="nodo"+contador;
		
		return etiqueta;
	}
	
	public void analizar(String cadena)  throws ParseException {
	
		try
		{
			compilador analizador = new compilador(new StringReader(cadena) ) ;
			
			root = analizador.iniciar(); 
			System.out.println("SE ANALIZO CORRECTAMENTE ");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Analizador: Se han encontrado errores en el analisis.");
		}

	}
	public compilador(){}
	
}
PARSER_END(compilador)

SKIP : 
{ 
	" "|"\n" |"\r" |"\r\n" |"\t"
}
TOKEN:
{
	 <entero : (["0"-"9"])+ > {System.out.print("entero "+image+"\r\n");}
	| <doble:(<entero>)"."(["0"-"9"])+ > {System.out.print("doble "+image+"\r\n");}
	| <booleano: "falso"|"false"|"verdadero"|"true" > {System.out.print("boolean "+image+"\r\n");}
	| <caracter: "'" (~["'","^"]|"^n"|"^t"|"^r"|"^'"|"^^") "'" > {System.out.print("caracter "+image+"\r\n");}
	| <cadena: "\"" (~["\"","#"]|"#n"|"#t"|"#r"|"#\""|"##")+ "\"" > {System.out.print("cadena "+image+"\r\n");}
	| <comentario :">>" (~["\n"])* > {System.out.print("comentario "+image+"\r\n");}
	| <comentarioall : "<-" (~["-"])* "->" > {System.out.print("comentarioall "+image+"\r\n"); }
	| <dolar: "$" > {System.out.print("dolar-> "+image+"\r\n");}
	| <sigabrir: "Â¿"|"\u00bf" > {System.out.print("sigabrir-> "+image+"\r\n");}
	| <sigcerrar: "?" > {System.out.print("sigcerrar-> "+image+"\r\n");}
	| <tentero: "Entero"|"entero" >{System.out.print("tentero "+image+"\r\n");}
	| <tdoble: "Doble"|"doble" >{System.out.print("tdoble "+image+"\r\n");}
	| <tcaracter: "Caracter"|"caracter" >{System.out.print("tcaracter "+image+"\r\n");}
	| <tboolean: "Boolean"|"boolean" >{System.out.print("tboolean "+image+"\r\n");}
	| <tcadena: "Cadena"|"cadena" >{System.out.print("tcadena "+image+"\r\n");}
}


TOKEN:
{
	 <or: "||" >{System.out.print("or "+image+"\r\n");}
	|<and: "&&" >{System.out.print("and "+image+"\r\n");}
	|<nand: "!&&" >{System.out.print("nand "+image+"\r\n");}
	|<nor: "!||" >{System.out.print("nor "+image+"\r\n");}
	|<xor: "&|" >{System.out.print("xor "+image+"\r\n");}
	|<nulo: "!\u00a1"|"!&\u00a1" > {System.out.print("nulo "+image+"\r\n");}
	|<not: "!" >{System.out.print("not "+image+"\r\n");}
}


TOKEN:
{
	 <igualacion: "==" > {System.out.print("igualacion "+image+"\r\n");}
	|<diferenciacion: "!=" > {System.out.print("diferenciacion "+image+"\r\n");}
	|<menorque: "<" > {System.out.print("menorque "+image+"\r\n");}
	|<menorigualque: "<=" > {System.out.print("menorigualque "+image+"\r\n");}
	|<mayorque: ">" > {System.out.print("mayorque "+image+"\r\n");}
	|<mayorigualque: ">=" > {System.out.print("mayorigualque "+image+"\r\n");}
	
}


TOKEN:
{
	 <mas: "+" >{System.out.print("suma "+image+"\r\n");}
	|<menos: "-" >{System.out.print("resta "+image+"\r\n");}
	|<por: "*" >{System.out.print("multi "+image+"\r\n");}
	|<div: "/" >{System.out.print("div "+image+"\r\n");}
	|<potencia: "^" >{System.out.print("^"+image+"\r\n");}
}

TOKEN:
{
	 <lienzo: "Lienzo"|"lienzo" >{System.out.print("lienzo "+image+"\r\n");}
	|<extiende: "Extiende"|"extiende" >{System.out.print("extiende "+image+"\r\n");}
	|<conservar: "Conservar"|"conservar" >{System.out.print("conservar "+image+"\r\n");}
	|<coma: "," >{System.out.print("coma "+image+"\r\n");}
	|<igual: "=" >{System.out.print("igual "+image+"\r\n");}
	|<publico: "Publico"|"publico" >{System.out.print("publico "+image+"\r\n");}
	|<privado: "Privado"|"privado" >{System.out.print("privado "+image+"\r\n");}
	|<protegido: "Protegido"|"protegido" >{System.out.print("protegido "+image+"\r\n");}
	|<var: "Var"|"var" >{System.out.print("var "+image+"\r\n");}
	
}

TOKEN:
{
	 <aumento: "++" >{System.out.print("aumento "+image+"\r\n");}
	|<decremento: "--" >{System.out.print("decremento "+image+"\r\n");}
	|<sumasim: "+=" >{System.out.print("sumasim "+image+"\r\n");}
	|<restasim: "-=" >{System.out.print("restasim "+image+"\r\n");}
	|<arreglo: "Arreglo"|"arreglo" >{System.out.print("arreglo "+image+"\r\n");}
	|<corchetei: "[" >{System.out.print("corchetei "+image+"\r\n");}
	|<corcheted: "]" >{System.out.print("corcheted "+image+"\r\n");}
	|<parenti: "(" >{System.out.print("parenti "+image+"\r\n");}
	|<parentd: ")" >{System.out.print("parentd "+image+"\r\n");}
	|<llavei: "{" >{System.out.print("llavei "+image+"\r\n");}
	|<llaved: "}" >{System.out.print("llaved "+image+"\r\n");}
	
}


TOKEN:
{
	 <si: "Si"|"si" >{System.out.print("si "+image+"\r\n");}
	|<sino: "Sino"|"sino" >{System.out.print("sino "+image+"\r\n");}
	|<comprobar: "Comprobar"|"comprobar" >{System.out.print("comprobar "+image+"\r\n");}
	|<caso: "Caso"|"caso" >{System.out.print("caso "+image+"\r\n");}
	|<tvalor: "Valor"|"valor" >{System.out.print("valor "+image+"\r\n");}
	|<dospuntos: ":" >{System.out.print("dospuntos "+image+"\r\n");}
	|<salir: "Salir"|"salir" >{System.out.print("salir "+image+"\r\n");}
	|<defecto: "Defecto"|"defecto" >{System.out.print("defecto "+image+"\r\n");}
	|<para: "Para"|"para" >{System.out.print("para "+image+"\r\n");}
	|<puntoycoma: ";" >{System.out.print("puntoycoma "+image+"\r\n");}
	|<mientras: "Mientras"|"mientras" >{System.out.print("mientras "+image+"\r\n");}
	|<hacer: "Hacer"|"hacer" >{System.out.print("hacer "+image+"\r\n");}
	|<continuar: "Continuar"|"continuar" >{System.out.print("continuar "+image+"\r\n");}
	|<tvoid: "Void"|"void" >{System.out.print("void "+image+"\r\n");}
	|<retorna: "Retorna"|"retorna" >{System.out.print("retorna "+image+"\r\n");}
}

TOKEN:
{
	 <pintarP: "Pintar_P"|"pintar_P" >{System.out.print("pintar_P "+image+"\r\n");}
	|<pintarOR: "Pintar_OR"|"pintar_OR" >{System.out.print("pintar_OR "+image+"\r\n");}
	|<pintarS: "Pintar_S"|"pintar_S" >{System.out.print("pintar_S "+image+"\r\n");}
}

TOKEN:
{
	 <principal: "Principal"|"principal" >{System.out.print("principal "+image+"\r\n");}
	|<ordenar: "Ordenar"|"ordenar" >{System.out.print("ordenar "+image+"\r\n");}
	|<tipo: "Tipo"|"tipo" >{System.out.print("tipo "+image+"\r\n");}
	|<sumarizar: "Sumarizar"|"sumarizar" >{System.out.print("sumarizar "+image+"\r\n");}
	|<ascendente: "Ascendente"|"ascendente" >{System.out.print("ascendente "+image+"\r\n");}
	|<descendente: "Descendente"|"descendente" >{System.out.print("descendente "+image+"\r\n");}
	|<pares: "Pares"|"pares" >{System.out.print("pares "+image+"\r\n");}
	|<impares: "Impares"|"impares" >{System.out.print("impares "+image+"\r\n");}
	|<primos: "Primos"|"primos" >{System.out.print("primos "+image+"\r\n");}
	|<id : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* > {System.out.print("id -> "+image+"\r\n");}
	|<colore: "\"" (~["\""])+ "\"" > {System.out.print("colore "+image+"\r\n");}
	
}

NodoArbol iniciar():
{
	 NodoArbol nodo = new NodoArbol();  
	 nodo.nombre = "Ini"; nodo.grafoname=getEtiqueta(); nodo.cadena = "Ini"; nodo.numero =0;
} //Codigo java. Crear variables
{
	S(nodo) {return nodo;}
	//<lienzo> <id> 
	//(<entero>|<doble>|<booleano>|<caracter>|<cadena>)+
	//<EOF> // End of file
}

void S(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	NodoArbol nodo3 = new NodoArbol();
	NodoArbol nodo4 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="S";
	padre.hijos.add(nodo);
}
{
	(COMENTARIOS())* (VISI(nodo))? <lienzo> <id> 
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena="lienzo";
		nodo3.grafoname=getEtiqueta(); nodo3.cadena=token.image; nodo3.f = token.beginLine; nodo3.c = token.beginColumn;
		nodo.hijos.add(nodo2);
		nodo.hijos.add(nodo3);
	}
											(EXT(nodo))? <sigabrir> ({nodo4.grafoname=getEtiqueta(); nodo4.cadena="SENTENCIAS"; nodo.hijos.add(nodo4);} SENTENCIAS(nodo4))? <sigcerrar> (COMENTARIOS())* <EOF> // End of file
}
void COMENTARIOS():
{}
{
	<comentario>
	|<comentarioall> 
	
}

void VISI(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="VISI";
	padre.hijos.add(nodo);
}
{
	<publico>
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena="publico";
		nodo.hijos.add(nodo2);
	}
	|<privado>
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena="privado";
		nodo.hijos.add(nodo2);
	}
	|<protegido>
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena="protegido";
		nodo.hijos.add(nodo2);		
	}
}

void EXT(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	NodoArbol nodo3 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="EXT";
	padre.hijos.add(nodo);
}
{
	<extiende> <id> 
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena="extiende";
		nodo3.grafoname=getEtiqueta(); nodo3.cadena=token.image; nodo3.f=token.beginLine; nodo3.c=token.beginColumn;
		nodo.hijos.add(nodo2);
		nodo.hijos.add(nodo3);
	}
	
					(EXT1(nodo))?
						
}

void EXT1(NodoArbol padre):
{	
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="EXT1";
	padre.hijos.add(nodo);
}
{
	<coma> <id> 
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn;
		nodo.hijos.add(nodo2);
	}
				(EXT1(nodo))?
}

void SENTENCIAS(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo2.grafoname=getEtiqueta(); nodo2.cadena="SEN";
	padre.hijos.add(nodo2);
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENTENCIAS";
	padre.hijos.add(nodo);
	
	
	//System.out.println("\n SENTENCIAS \n");
}
{
	SEN(nodo2) (SENTENCIAS(nodo))? 
}


void SEN(NodoArbol padre):
{
	
}
{
	<comentario> 
	|<comentarioall>
	|CONTENIDO(padre)	
	|SENSI(padre)
	|SENCOMPROBAR(padre)
	|SENPARA(padre)
	|SENMIENTRAS(padre)
	|SENHACER(padre)
	|SENSALIR(padre)
	|RETO(padre)
	|SENCONTINUAR(padre)
	|DIBUJAR_P(padre)
	|DIBUJAR_OR(padre)
	|DIBUJAR_S(padre)
	|PRI(padre)
	|ORDEN(padre) <dolar>
	|SUMARI(padre) <dolar>
}


//----------------------------------------------ACA ME QUEDE FECHA 26/08/2016
void CONTENIDO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CONTENIDO";	
	padre.hijos.add(nodo); 
	
}
{
	(CONSERV(nodo))? (VISI(nodo))? CONT(nodo)	
	//|TIPO() <id> <igual> VALOR() <dolar>
	//|<id> CONT2() <dolar>
}

void CONSERV(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CONSERV";
	padre.hijos.add(nodo);
}
{
	<conservar>
	{
		nodo2.grafoname=getEtiqueta(); nodo2.cadena="conservar";
		nodo.hijos.add(nodo2);
	}
}

void CONT(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CONT";
	padre.hijos.add(nodo);
}
{
	DECLARACION(nodo) <dolar>
	|CONTENIDO3(nodo)
	//faltan metodos y funciones y asignaciones de valorea a variables por temas de factorizacion
}

void DECLARACION(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="DECLARACION";
	padre.hijos.add(nodo);
}
{
	//<var> TIPO() NOMBRES() <dolar>
	<var> TIPO(nodo) VARIABLE(nodo)
}


void TIPO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="TIPO";
	padre.hijos.add(nodo);
}
{
	<tentero> 		{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tentero";	nodo.hijos.add(nodo2); }
	|<tdoble> 		{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tdoble";		nodo.hijos.add(nodo2); }
	|<tboolean> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tboolean";	nodo.hijos.add(nodo2); }
	|<tcaracter> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcaracter";	nodo.hijos.add(nodo2); }
	|<tcadena> 		{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcadena";	nodo.hijos.add(nodo2); }
}

void VARIABLE(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="VARIABLE";
	padre.hijos.add(nodo);
}
{
	NOMBRES(nodo)
	|<arreglo> NOMARREGLO(nodo) DIMENSION(nodo) (ASIGNARREGLO(nodo))? 
	
}

void NOMARREGLO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="NOMARREGLO";
	padre.hijos.add(nodo);
}
{
	<id> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); }
			(NOMARR(nodo))?
}

void NOMARR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="NOMARR";
	padre.hijos.add(nodo);
}
{
	<coma> <id> 
	{nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); }
				(NOMARR(nodo))?
}

void DIMENSION(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="DIMENSION";
	padre.hijos.add(nodo);
}
{
	<corchetei> VALOR(nodo) <corcheted> (DIMENSION(nodo))?
}

void ASIGNARREGLO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="ASIGNARREGLO";
	padre.hijos.add(nodo);
}
{
	<igual> VALORARREGLO(nodo)
}

void VALORARREGLO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="VALORARREGLO";
	padre.hijos.add(nodo);
}
{
	<llavei> VALARR(nodo) <llaved>
	
}

void VALARR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="VALARR";
	padre.hijos.add(nodo);
}
{
	R2(nodo)
	|<llavei> VALARR(nodo) <llaved> (LVAL2(nodo))?
}

void R2(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="R2";
	padre.hijos.add(nodo);
}
{
	VALOR(nodo) (LVAL(nodo))?
}

void LVAL(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="LVAL";
	padre.hijos.add(nodo);
}
{
	<coma> VALOR(nodo) (LVAL(nodo))?
}

void LVAL2(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="LVAL2";
	padre.hijos.add(nodo);
}
{
	<coma> <llavei> VALARR(nodo) <llaved> (LVAL2(nodo))?
	
}

void NOMBRES(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="NOMBRES";
	padre.hijos.add(nodo);
}
{

	<id>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); }
		
		(ASIGN(nodo))? (NOM(nodo))?
}

void NOM(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="NOM";
	padre.hijos.add(nodo);
}
{
	<coma> <id>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); } 
				(ASIGN(nodo))? (NOM(nodo))?
	
}

void ASIGN(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="ASIGN";
	padre.hijos.add(nodo);
}
{
	<igual> VALOR(nodo)
	
}

void VALOR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="VALOR";
	padre.hijos.add(nodo);
}
{
//	C()
	LOGICA(nodo)
}


void CONT2(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CONT2";
	padre.hijos.add(nodo);
}
{
	//<igual> VALOR()
	<aumento> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="++"; nodo.hijos.add(nodo2); }
	|<decremento> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="--"; nodo.hijos.add(nodo2); }
	|<sumasim> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="+="; nodo.hijos.add(nodo2); }
	|<restasim> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="-="; nodo.hijos.add(nodo2); }
	//|<igual>

}

//----------------CALCULADORA
void C(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="C";
	padre.hijos.add(nodo);
}
{
	E(nodo)
}

void E(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="E";
	padre.hijos.add(nodo);
}
{
	T(nodo) (EP(nodo))?
}

void EP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="EP";
	padre.hijos.add(nodo);
}
{
	<mas>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="+"; nodo.hijos.add(nodo2); } 
		T(nodo) (EP(nodo))?
	|<menos> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="-"; nodo.hijos.add(nodo2); }
		T(nodo) (EP(nodo))?
}

void T(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="T";
	padre.hijos.add(nodo);
}
{
	F(nodo) (TP(nodo))?
}

void TP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="TP";
	padre.hijos.add(nodo);

}
{
	<por>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="*"; nodo.hijos.add(nodo2); } 
		F(nodo) (TP(nodo))?
	|<div>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="/"; nodo.hijos.add(nodo2); } 
		F(nodo) (TP(nodo))?	
}

void F(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="F";
	padre.hijos.add(nodo);
}
{
	G(nodo) (FP(nodo))?
}

void FP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="FP";
	padre.hijos.add(nodo);
}
{
	<potencia>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="^"; nodo.hijos.add(nodo2); } 
			G(nodo) (FP(nodo))?
}

void G(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="G";
	padre.hijos.add(nodo);
}
{
	<entero> { 		nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="entero"; 	nodo.hijos.add(nodo2); }
	|<doble> { 		nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="doble"; 	nodo.hijos.add(nodo2); }
	|<booleano> { 	nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="boolean"; nodo.hijos.add(nodo2); }
	|<caracter> { 	nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="caracter";nodo.hijos.add(nodo2); }
	|<cadena> { 	nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="cadena"; 	nodo.hijos.add(nodo2); }
	|<id> { 		nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="id";		nodo.hijos.add(nodo2); } (HH(nodo))? 
	|ORDEN(nodo)
	|SUMARI(nodo)
	//|CONTENIDO3()
	//|<parenti> E() <parentd>
}

void HH(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="HH";
	padre.hijos.add(nodo);
}
{
	DIMENSION(nodo)
	|<parenti> (PARAMETROS(nodo))? <parentd>		//llamada a metodo
	|CONT2(nodo)
	//|<igual> <id> CONT2()	//id = id ++ 
}

//-----------------RELACIONAL
void RELACIONAL(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="RELACIONAL";
	padre.hijos.add(nodo);
}
{
	A(nodo)	
}


void A(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="A";
	padre.hijos.add(nodo);
}
{
	EXP(nodo) (AP(nodo))?
	//|<nulo> EXP()	
}

void AP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
    NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="AP";
	padre.hijos.add(nodo);
}
{
	<igualacion> 		{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="=="; nodo.hijos.add(nodo2);}	EXP(nodo)
	|<diferenciacion> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="!="; nodo.hijos.add(nodo2);} EXP(nodo)
	|<menorque> 		{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="<"; nodo.hijos.add(nodo2);} EXP(nodo)
	|<menorigualque> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="<="; nodo.hijos.add(nodo2);} EXP(nodo)
	|<mayorque> 		{ nodo2.grafoname=getEtiqueta(); nodo2.cadena=">"; nodo.hijos.add(nodo2);} EXP(nodo)
	|<mayorigualque> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena=">="; nodo.hijos.add(nodo2);} EXP(nodo)
	
}


void EXP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="EXP";
	padre.hijos.add(nodo);
}
{
	(<nulo>	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="nulo"; nodo.hijos.add(nodo2);}	)? 
			E(nodo)
//	|<parenti> A() <parentd>
}

//-------------------LOGICA
void LOGICA(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="LOGICA";
	padre.hijos.add(nodo);
}
{
	L(nodo)
}

void L(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="L";
	padre.hijos.add(nodo);
}
{
	M(nodo) (LP(nodo))?
}

void LP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="LP";
	padre.hijos.add(nodo);
}
{
	<or>  { nodo2.grafoname=getEtiqueta(); nodo2.cadena="||"; nodo.hijos.add(nodo2); } 
		M(nodo) (LP(nodo))?
	|<nor> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="!||"; nodo.hijos.add(nodo2); } 
		M(nodo) (LP(nodo))?
	|<xor> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="&|"; nodo.hijos.add(nodo2); } 
		M(nodo) (LP(nodo))?
	
}

void M(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="M";
	padre.hijos.add(nodo);
}
{
	N(nodo) (MP(nodo))?
}

void MP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="MP";
	padre.hijos.add(nodo);
}
{
	<and> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="&&"; nodo.hijos.add(nodo2); } 
		N(nodo) (MP(nodo))?
	|<nand> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="!&&"; nodo.hijos.add(nodo2); } 
		N(nodo) (MP(nodo))?
}

void N(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="N";
	padre.hijos.add(nodo);
}
{
	R(nodo) //(NP(nodo))?
}
/*
void NP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="NP";
	padre.hijos.add(nodo);
}
{
	R(nodo) (NP(nodo))?
}
*/
//LA PARTE DE DECLARACION NO SE HA COMPLETADO
//LA PARTE DEL CONT2 NO SE HA COMPLETADO

void R(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="R";
	padre.hijos.add(nodo);
}
{
	//E()
	(<not>  { nodo2.grafoname=getEtiqueta(); nodo2.cadena="!"; nodo.hijos.add(nodo2); }  )? Z(nodo)
}
void Z(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="Z";
	padre.hijos.add(nodo);
}
{
	RELACIONAL(nodo)
	|<parenti> LOGICA(nodo) <parentd>
}


//SENTENCIAS DE CONTROL
void SENSI(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENSI";
	padre.hijos.add(nodo);
}
{
	<si> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="si"; nodo.hijos.add(nodo2); } <parenti> LOGICA(nodo) <parentd> <sigabrir> (SENTENCIAS(nodo))? <sigcerrar> (SENSINO(nodo))?
}

void SENSINO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENSINO";
	padre.hijos.add(nodo);
}
{
	<sino>{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="sino"; nodo.hijos.add(nodo2); } <sigabrir> (SENTENCIAS(nodo))? <sigcerrar>
	
}

void SENCOMPROBAR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENCOMPROBAR";
	padre.hijos.add(nodo);
}
{
	<comprobar> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="comprobar"; nodo.hijos.add(nodo2); } <parenti> VALOR(nodo) <parentd> <sigabrir> (CUERPO(nodo))? (DEFE(nodo))? <sigcerrar>
}

void CUERPO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CUERPO";
	padre.hijos.add(nodo);
}
{
	<caso> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="caso"; nodo.hijos.add(nodo2); } VALOR(nodo) <dospuntos> (SENTENCIAS(nodo))? (CUERPO(nodo))?
}

void SENSALIR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENSALIR";
	padre.hijos.add(nodo);
}
{
	<salir> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="salir"; nodo.hijos.add(nodo2); } <dolar>
}

void DEFE(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="DEFE";
	padre.hijos.add(nodo);
}
{
	<defecto> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="defecto"; nodo.hijos.add(nodo2); } <dospuntos> (SENTENCIAS(nodo))?
}

void SENPARA(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	NodoArbol nodo3 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENPARA";
	padre.hijos.add(nodo);
}
{
	<para> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="para"; nodo.hijos.add(nodo2); } <parenti> INIPARA(nodo) <puntoycoma> LOGICA(nodo) <puntoycoma> G(nodo) (FINPARA(nodo))? <parentd> <sigabrir> (SENTENCIAS(nodo))? <sigcerrar>
}

void INIPARA(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="INIPARA";
	padre.hijos.add(nodo);
}
{
	DECLARACION(nodo) 
	| G(nodo) (ASIGN(nodo))?
	| TIPO(nodo) G(nodo) ASIGN(nodo)
}


void FINPARA(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="FINPARA";
	padre.hijos.add(nodo);
}
{
	<igual> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="="; nodo.hijos.add(nodo2); } VALOR(nodo)
	|VALOR(nodo)
}
void SENMIENTRAS(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENMIENTRAS";
	padre.hijos.add(nodo);
}
{
	<mientras> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="mientras"; nodo.hijos.add(nodo2); } <parenti> LOGICA(nodo) <parentd> <sigabrir> (SENTENCIAS(nodo))? <sigcerrar>	
}

void SENHACER(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENHACER";
	padre.hijos.add(nodo);
}
{
	<hacer> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="hacer"; nodo.hijos.add(nodo2); } <sigabrir> (SENTENCIAS(nodo))? <sigcerrar> <mientras> <parenti> LOGICA(nodo) <parentd> <dolar>
}

void SENCONTINUAR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SENCONTINUAR";
	padre.hijos.add(nodo);
}
{
	<continuar> <dolar>
}

void CONTENIDO3(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CONTENIDO3";
	padre.hijos.add(nodo);
}
{
	(TIPOMETODO(nodo))? <id> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); } (DIMENSION(nodo))? METODO(nodo)  
}

void TIPOMETODO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="TIPOMETODO";
	padre.hijos.add(nodo);
}
{
	<tentero> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tentero"; nodo.hijos.add(nodo2); } (<corchetei> <corcheted>	{NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3); } )*
	|<tdoble> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tdoble"; nodo.hijos.add(nodo2); } (<corchetei> <corcheted>	{NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3); } )*
	|<tboolean> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="tboolean"; nodo.hijos.add(nodo2); } (<corchetei> <corcheted>	{NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3); } )*
	|<tcaracter> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcaracter"; nodo.hijos.add(nodo2); } (<corchetei> <corcheted>	{NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3); } )*
	|<tcadena> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcadena"; nodo.hijos.add(nodo2); } (<corchetei> <corcheted>	{NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3); } )*
	|<tvoid> 	{ nodo2.grafoname=getEtiqueta(); nodo2.cadena="tvoid"; nodo.hijos.add(nodo2); } (<corchetei> <corcheted>	{NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3); } )*
}

void METODO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="METODO";
	padre.hijos.add(nodo);
}
{
	<parenti> (PARAMETROS(nodo))? <parentd> (METOD(nodo))? 
	|<igual> VALOR(nodo) <dolar> //asignacion de variable
	//|CONT2() <dolar> // sentencias de sumas y restas simplificadas
	|CONT2(nodo) (VALOR(nodo))? <dolar>
}


void METOD(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="METOD";
	padre.hijos.add(nodo);
}
{
	<sigabrir> (SENTENCIAS(nodo))? <sigcerrar>//declaracion de metodos
	|<dolar> { nodo2.grafoname=getEtiqueta(); nodo2.cadena="dolar"; nodo.hijos.add(nodo2); }	//invocacion de metodo
}

void LISTPARAMETRO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="LISTPARAMETRO";
	padre.hijos.add(nodo);
}
{
	VALOR(nodo) (LISTPARAMETRO2(nodo))?
}

void LISTPARAMETRO2(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="LISTPARAMETRO2";
	padre.hijos.add(nodo);
}
{
	<coma> VALOR(nodo) (LISTPARAMETRO2(nodo))?	
}

void RETO(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="RETO";
	padre.hijos.add(nodo);
}
{
	<retorna> VALOR(nodo) <dolar>
}

void PARAMETROS(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="PARAMETROS";
	padre.hijos.add(nodo);
}
{
	TIPO(nodo) <id> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); } (PARAP(nodo))?
	|LISTPARAMETRO(nodo) 
}

void PARAP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="PARAP";
	padre.hijos.add(nodo);
}
{
	<coma> TIPO(nodo) <id> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); } (PARAP(nodo))?
}


//----------------------METODOS NATIVOS DEL LENGUAJE

void DIBUJAR_P(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="DIBUJAR_P";
	padre.hijos.add(nodo);
}
{
	<pintarP> <parenti> C(nodo) <coma> C(nodo) <coma> COLOR(nodo) <coma> C(nodo) <parentd> <dolar>
}

void DIBUJAR_OR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="DIBUJAR_OR";
	padre.hijos.add(nodo);
}
{
	<pintarOR> <parenti> C(nodo) <coma> C(nodo) <coma> COLOR(nodo) <coma> C(nodo) <coma> C(nodo) <coma> C(nodo) <parentd> <dolar>
}

void DIBUJAR_S(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="DIBUJAR_S";
	padre.hijos.add(nodo);
}
{
	<pintarS> <parenti> C(nodo) <coma> C(nodo) <coma> COLOR(nodo) <coma> C(nodo) <parentd> <dolar>
}

void COLOR(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="COLOR";
	padre.hijos.add(nodo);
}
{
	C(nodo)
	|<colore> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="cadena"; nodo.hijos.add(nodo2); } 
	
}

void PRI(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="PRI";
	padre.hijos.add(nodo);
}
{
	<principal> <parenti> <parentd> <sigabrir> (SENTENCIAS(nodo))? <sigcerrar>
}


void ORDEN(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="ORDEN";
	padre.hijos.add(nodo);
}
{
	<ordenar> <parenti> <arreglo> <id> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); } <coma> <tipo> FORMAORDEN(nodo) <parentd>
}

void FORMAORDEN(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();	
	nodo.grafoname=getEtiqueta(); nodo.cadena="FORMAORDEN";
	padre.hijos.add(nodo);
}
{
	<ascendente> 	{nodo2.grafoname=getEtiqueta(); nodo2.cadena="ascendente"; 	nodo.hijos.add(nodo2); } 
	|<descendente>	{nodo2.grafoname=getEtiqueta(); nodo2.cadena="descendente"; nodo.hijos.add(nodo2); }
	|<pares>		{nodo2.grafoname=getEtiqueta(); nodo2.cadena="pares"; 		nodo.hijos.add(nodo2); }
	|<impares>		{nodo2.grafoname=getEtiqueta(); nodo2.cadena="impares"; 	nodo.hijos.add(nodo2); }
	|<primos>		{nodo2.grafoname=getEtiqueta(); nodo2.cadena="primos"; 		nodo.hijos.add(nodo2); }
}

void SUMARI(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="SUMARI";
	padre.hijos.add(nodo);
}
{
	<sumarizar> <parenti> CONT5(nodo) <parentd>	
}

void CONT5(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	NodoArbol nodo2 = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="CONT5";
	padre.hijos.add(nodo);
}
{
	<id> { nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2); }
	|VALORARREGLO(nodo)
}