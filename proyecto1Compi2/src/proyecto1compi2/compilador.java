/* compilador.java */
/* Generated By:JavaCC: Do not edit this line. compilador.java */
package proyecto1compi2;


import java.io.StringReader;
import java.util.ArrayList;

class compilador implements compiladorConstants {
        int contador=0;
        NodoArbol root = new NodoArbol();
        public String getEtiqueta(){

                contador++;
                String etiqueta="nodo"+contador;

                return etiqueta;
        }

        public void analizar(String cadena)  throws ParseException {

                try
                {
                        compilador analizador = new compilador(new StringReader(cadena) ) ;

                        root = analizador.iniciar();
                        System.out.println("SE ANALIZO CORRECTAMENTE ");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Analizador: Se han encontrado errores en el analisis.");
                }

        }
        public compilador(){}

  final public NodoArbol iniciar() throws ParseException {NodoArbol nodo = new NodoArbol();
         nodo.nombre = "Ini"; nodo.grafoname=getEtiqueta(); nodo.cadena = "Ini"; nodo.numero =0;
    S(nodo);
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public void S(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        NodoArbol nodo3 = new NodoArbol();
        nodo.nombre = "S"; nodo.grafoname=getEtiqueta(); nodo.cadena = "S"; nodo.numero =0;
        padre.hijos.add(nodo);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comentario:
      case comentarioall:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      COMENTARIOS();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case publico:
    case privado:
    case protegido:{
      VISI(nodo);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(lienzo);
    jj_consume_token(id);
nodo2.nombre = "Lienzo"; nodo2.grafoname=getEtiqueta(); nodo2.cadena = "Lienzo"; nodo2.numero =0;
                nodo3.nombre = "id"; nodo3.grafoname=getEtiqueta(); nodo3.cadena = token.image; nodo3.numero =0;
                nodo.hijos.add(nodo2);
                nodo.hijos.add(nodo3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case extiende:{
      EXT(nodo);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comentario:
      case comentarioall:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      COMENTARIOS();
    }
    jj_consume_token(0);
  }

  final public void COMENTARIOS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:{
      jj_consume_token(comentario);
      break;
      }
    case comentarioall:{
      jj_consume_token(comentarioall);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VISI(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo2.nombre = "VISI"; nodo2.grafoname = getEtiqueta(); nodo2.cadena = "VISI"; nodo2.numero=0;
        padre.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case publico:{
      jj_consume_token(publico);
nodo.nombre = "publico"; nodo.grafoname = getEtiqueta(); nodo.cadena = "publico"; nodo.numero=0;
                nodo2.hijos.add(nodo);
      break;
      }
    case privado:{
      jj_consume_token(privado);
nodo.nombre = "privado"; nodo.grafoname = getEtiqueta(); nodo.cadena = "privado"; nodo.numero=0;
                nodo2.hijos.add(nodo);
      break;
      }
    case protegido:{
      jj_consume_token(protegido);
nodo.nombre = "protegido"; nodo.grafoname = getEtiqueta(); nodo.cadena = "protegido"; nodo.numero=0;
                nodo2.hijos.add(nodo);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EXT(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        NodoArbol nodo3 = new NodoArbol();
        nodo.nombre = "EXT"; nodo.grafoname = getEtiqueta(); nodo.cadena = "EXT"; nodo.numero=0;
        padre.hijos.add(nodo);
    jj_consume_token(extiende);
    jj_consume_token(id);
nodo2.nombre = "extiende"; nodo2.grafoname = getEtiqueta(); nodo2.cadena = "extiende"; nodo2.numero=0;
                nodo3.nombre = "id"; nodo3.grafoname = getEtiqueta(); nodo3.cadena = token.image; nodo3.numero=0;
                nodo.hijos.add(nodo2);
                nodo.hijos.add(nodo3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      EXT1(nodo);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void EXT1(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo2.nombre = "EXT1"; nodo2.grafoname = getEtiqueta(); nodo2.cadena = "EXT1"; nodo2.numero=0;
        padre.hijos.add(nodo2);
    jj_consume_token(coma);
    jj_consume_token(id);
nodo.nombre = "id"; nodo.grafoname = getEtiqueta(); nodo.cadena = token.image; nodo.numero=0;
                nodo2.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      EXT1(nodo2);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void SENTENCIAS(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.nombre = "SENTENCIAS"; nodo.grafoname = getEtiqueta(); nodo.cadena = "SENTENCIAS"; nodo.numero=0;
        padre.hijos.add(nodo);
        nodo2.nombre = "SEN"; nodo2.grafoname = getEtiqueta(); nodo2.cadena ="SEN"; nodo2.numero=0;
        nodo.hijos.add(nodo2);
    SEN(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void SEN(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:{
      jj_consume_token(comentario);
      break;
      }
    case comentarioall:{
      jj_consume_token(comentarioall);
      break;
      }
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case id:{
nodo.nombre = "CONTENIDO"; nodo.grafoname = getEtiqueta(); nodo.cadena = "CONTENIDO"; nodo.numero=0;
                padre.hijos.add(nodo);
      CONTENIDO(nodo);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//----------------------------------------------ACA ME QUEDE FECHA 26/08/2016
  final public void CONTENIDO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case conservar:{
        CONSERV(padre);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case publico:
      case privado:
      case protegido:{
        VISI(padre);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      CONT(padre);
      break;
      }
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:{
      TIPO();
      jj_consume_token(id);
nodo.nombre = "id"; nodo.grafoname = getEtiqueta(); nodo.cadena=token.image; nodo.numero=0;
                nodo2.nombre = "="; nodo2.grafoname = getEtiqueta(); nodo2.cadena="="; nodo2.numero=0;
                padre.hijos.add(nodo);
                padre.hijos.add(nodo2);
      jj_consume_token(igual);
      VALOR();
      jj_consume_token(dolar);
      break;
      }
    case id:{
      jj_consume_token(id);
nodo.nombre = "id"; nodo.grafoname = getEtiqueta(); nodo.cadena=token.image; nodo.numero=0;
                padre.hijos.add(nodo);
      CONT2(padre);
      jj_consume_token(dolar);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CONSERV(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.nombre = "CONSERV"; nodo.grafoname= getEtiqueta(); nodo.cadena="CONSERV"; nodo.numero=0;
        padre.hijos.add(nodo);
    jj_consume_token(conservar);
nodo2.nombre = "conversar"; nodo2.grafoname= getEtiqueta(); nodo2.cadena="conservar"; nodo2.numero=0;
                nodo.hijos.add(nodo2);
  }

  final public void CONT(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.nombre = "CONT"; nodo.grafoname= getEtiqueta(); nodo.cadena="CONT"; nodo.numero=0;
        padre.hijos.add(nodo);
    DECLARACION();
nodo2.nombre = "DECLARACION"; nodo2.grafoname = getEtiqueta(); nodo2.cadena="DECLARACION"; nodo2.numero=0;
                nodo.hijos.add(nodo2);
  }

  final public void DECLARACION() throws ParseException {
    jj_consume_token(var);
    TIPO();
    NOMBRES();
    jj_consume_token(dolar);
  }

  final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tentero:{
      jj_consume_token(tentero);
      break;
      }
    case tdoble:{
      jj_consume_token(tdoble);
      break;
      }
    case tboolean:{
      jj_consume_token(tboolean);
      break;
      }
    case tcaracter:{
      jj_consume_token(tcaracter);
      break;
      }
    case tcadena:{
      jj_consume_token(tcadena);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NOMBRES() throws ParseException {
    jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igual:{
      ASIGN();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      NOM();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void NOM() throws ParseException {
    jj_consume_token(coma);
    jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igual:{
      ASIGN();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      NOM();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void ASIGN() throws ParseException {
    jj_consume_token(igual);
    VALOR();
  }

  final public void VALOR() throws ParseException {
    C();
  }

  final public void CONT2(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.nombre = "CONT2"; nodo.grafoname=getEtiqueta(); nodo.cadena="CONT2"; nodo.numero=0;
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igual:{
      jj_consume_token(igual);
      VALOR();
      break;
      }
    case aumento:{
      jj_consume_token(aumento);
      break;
      }
    case decremento:{
      jj_consume_token(decremento);
      break;
      }
    case sumasim:{
      jj_consume_token(sumasim);
      VALOR();
      break;
      }
    case restasim:{
      jj_consume_token(restasim);
      VALOR();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//----------------CALCULADORA
  final public void C() throws ParseException {
    E();
  }

  final public void E() throws ParseException {
    T();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mas:
    case menos:{
      EP();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void EP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mas:{
      jj_consume_token(mas);
      T();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mas:
      case menos:{
        EP();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
      }
    case menos:{
      jj_consume_token(menos);
      T();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mas:
      case menos:{
        EP();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void T() throws ParseException {
    F();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case por:
    case div:{
      TP();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void TP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case por:{
      jj_consume_token(por);
      F();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case por:
      case div:{
        TP();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      break;
      }
    case div:{
      jj_consume_token(div);
      F();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case por:
      case div:{
        TP();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void F() throws ParseException {
    G();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case potencia:{
      FP();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void FP() throws ParseException {
    jj_consume_token(potencia);
    G();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case potencia:{
      FP();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void G() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:{
      jj_consume_token(entero);
      break;
      }
    case doble:{
      jj_consume_token(doble);
      break;
      }
    case booleano:{
      jj_consume_token(booleano);
      break;
      }
    case caracter:{
      jj_consume_token(caracter);
      break;
      }
    case cadena:{
      jj_consume_token(cadena);
      break;
      }
    case id:{
      jj_consume_token(id);
      break;
      }
    case parenti:{
      jj_consume_token(parenti);
      E();
      jj_consume_token(parentd);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//-----------------RELACIONAL
  final public void RELACIONAL() throws ParseException {
    A();
  }

  final public void A() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case parenti:
    case id:{
      EXP();
      REL();
      break;
      }
    case nulo:{
      jj_consume_token(nulo);
      EXP();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void REL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igualacion:{
      jj_consume_token(igualacion);
      EXP();
      break;
      }
    case diferenciacion:{
      jj_consume_token(diferenciacion);
      EXP();
      break;
      }
    case menorque:{
      jj_consume_token(menorque);
      EXP();
      break;
      }
    case menorigualque:{
      jj_consume_token(menorigualque);
      EXP();
      break;
      }
    case mayorque:{
      jj_consume_token(mayorque);
      EXP();
      break;
      }
    case mayorigualque:{
      jj_consume_token(mayorigualque);
      EXP();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EXP() throws ParseException {
    E();
  }

//-------------------LOGICA
  final public void LOGICA() throws ParseException {
    L();
  }

  final public void L() throws ParseException {
    M();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case or:
    case nor:
    case xor:{
      LP();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void LP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case or:{
      jj_consume_token(or);
      M();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case or:
      case nor:
      case xor:{
        LP();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
      }
    case nor:{
      jj_consume_token(nor);
      M();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case or:
      case nor:
      case xor:{
        LP();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
      }
    case xor:{
      jj_consume_token(xor);
      M();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case or:
      case nor:
      case xor:{
        LP();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void M() throws ParseException {
    N();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:
    case nand:{
      MP();
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

  final public void MP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      jj_consume_token(and);
      N();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case and:
      case nand:{
        MP();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      break;
      }
    case nand:{
      jj_consume_token(nand);
      N();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case and:
      case nand:{
        MP();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void N() throws ParseException {
    jj_consume_token(not);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case nulo:
    case parenti:
    case id:{
      R();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
  }

//LA PARTE DE DECLARACION NO SE HA COMPLETADO
//LA PARTE DEL CONT2 NO SE HA COMPLETADO
  final public 
void R() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case parenti:
    case id:{
      E();
      break;
      }
    case nulo:{
      RELACIONAL();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public compiladorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x0,0x0,0x1f1800,0x1800,0x1800,0x0,0x0,0x0,0x1f1800,0x1f1800,0x0,0x0,0x1f0000,0x1f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c0,0x80007c0,0x7e00000,0x90000000,0x90000000,0x90000000,0x90000000,0x90000000,0x60000000,0x60000000,0x60000000,0x60000000,0x80007c0,0x80007c0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7000,0x100,0xf200,0x0,0x0,0x7000,0x400,0x400,0xf200,0xf200,0x200,0x7000,0xf200,0x0,0x800,0x400,0x800,0x400,0xf0800,0xc,0xc,0xc,0xc,0x30,0x30,0x30,0x30,0x40,0x40,0x800000,0x800000,0x0,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x800000,0x800000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,};
   }

  /** Constructor with InputStream. */
  public compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compilador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public compilador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public compilador(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[84];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 84; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
