/* compilador.java */
/* Generated By:JavaCC: Do not edit this line. compilador.java */
package proyecto1compi2;


import java.io.StringReader;
import java.util.ArrayList;

class compilador implements compiladorConstants {
        int contador=0;
        NodoArbol root = new NodoArbol();
        public String getEtiqueta(){

                contador++;
                String etiqueta="nodo"+contador;

                return etiqueta;
        }

        public void analizar(String cadena)  throws ParseException {

                try
                {
                        compilador analizador = new compilador(new StringReader(cadena) ) ;

                        root = analizador.iniciar();
                        System.out.println("SE ANALIZO CORRECTAMENTE ");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Analizador: Se han encontrado errores en el analisis.");
                }

        }
        public compilador(){}

  final public NodoArbol iniciar() throws ParseException {NodoArbol nodo = new NodoArbol();
         nodo.nombre = "Ini"; nodo.grafoname=getEtiqueta(); nodo.cadena = "Ini"; nodo.numero =0;
    S(nodo);
{if ("" != null) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public void S(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        NodoArbol nodo3 = new NodoArbol();
        NodoArbol nodo4 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="S";
        padre.hijos.add(nodo);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comentario:
      case comentarioall:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      COMENTARIOS();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case publico:
    case privado:
    case protegido:{
      VISI(nodo);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(lienzo);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="lienzo";
                nodo3.grafoname=getEtiqueta(); nodo3.cadena=token.image; nodo3.f = token.beginLine; nodo3.c = token.beginColumn;
                nodo.hijos.add(nodo2);
                nodo.hijos.add(nodo3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case extiende:{
      EXT(nodo);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
nodo4.grafoname=getEtiqueta(); nodo4.cadena="SENTENCIAS"; nodo.hijos.add(nodo4);
      SENTENCIAS(nodo4);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comentario:
      case comentarioall:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      COMENTARIOS();
    }
    jj_consume_token(0);
  }

  final public void COMENTARIOS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:{
      jj_consume_token(comentario);
      break;
      }
    case comentarioall:{
      jj_consume_token(comentarioall);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VISI(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="VISI";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case publico:{
      jj_consume_token(publico);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="publico";
                nodo.hijos.add(nodo2);
      break;
      }
    case privado:{
      jj_consume_token(privado);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="privado";
                nodo.hijos.add(nodo2);
      break;
      }
    case protegido:{
      jj_consume_token(protegido);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="protegido";
                nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EXT(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        NodoArbol nodo3 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="EXT";
        padre.hijos.add(nodo);
    jj_consume_token(extiende);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="extiende";
                nodo3.grafoname=getEtiqueta(); nodo3.cadena=token.image; nodo3.f=token.beginLine; nodo3.c=token.beginColumn;
                nodo.hijos.add(nodo2);
                nodo.hijos.add(nodo3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      EXT1(nodo);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void EXT1(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="EXT1";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn;
                nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      EXT1(nodo);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void SENTENCIAS(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo2.grafoname=getEtiqueta(); nodo2.cadena="SEN";
        padre.hijos.add(nodo2);
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENTENCIAS";
        padre.hijos.add(nodo);


        //System.out.println("\n SENTENCIAS \n");

    SEN(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void SEN(NodoArbol padre) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:{
      jj_consume_token(comentario);
      break;
      }
    case comentarioall:{
      jj_consume_token(comentarioall);
      break;
      }
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case tvoid:
    case id:{
      CONTENIDO(padre);
      break;
      }
    case si:{
      SENSI(padre);
      break;
      }
    case comprobar:{
      SENCOMPROBAR(padre);
      break;
      }
    case para:{
      SENPARA(padre);
      break;
      }
    case mientras:{
      SENMIENTRAS(padre);
      break;
      }
    case hacer:{
      SENHACER(padre);
      break;
      }
    case salir:{
      SENSALIR(padre);
      break;
      }
    case retorna:{
      RETO(padre);
      break;
      }
    case continuar:{
      SENCONTINUAR(padre);
      break;
      }
    case pintarP:{
      DIBUJAR_P(padre);
      break;
      }
    case pintarOR:{
      DIBUJAR_OR(padre);
      break;
      }
    case pintarS:{
      DIBUJAR_S(padre);
      break;
      }
    case principal:{
      PRI(padre);
      break;
      }
    case ordenar:{
      ORDEN(padre);
      jj_consume_token(dolar);
      break;
      }
    case sumarizar:{
      SUMARI(padre);
      jj_consume_token(dolar);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//----------------------------------------------ACA ME QUEDE FECHA 26/08/2016
  final public void CONTENIDO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CONTENIDO";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case conservar:{
      CONSERV(nodo);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case publico:
    case privado:
    case protegido:{
      VISI(nodo);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    CONT(nodo);
  }

  final public void CONSERV(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CONSERV";
        padre.hijos.add(nodo);
    jj_consume_token(conservar);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="conservar";
                nodo.hijos.add(nodo2);
  }

  final public void CONT(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CONT";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case var:{
      DECLARACION(nodo);
      jj_consume_token(dolar);
      break;
      }
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case tvoid:
    case id:{
      CONTENIDO3(nodo);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DECLARACION(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="DECLARACION";
        padre.hijos.add(nodo);
    jj_consume_token(var);
    TIPO(nodo);
    VARIABLE(nodo);
  }

  final public void TIPO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="TIPO";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tentero:{
      jj_consume_token(tentero);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tentero";        nodo.hijos.add(nodo2);
      break;
      }
    case tdoble:{
      jj_consume_token(tdoble);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tdoble";         nodo.hijos.add(nodo2);
      break;
      }
    case tboolean:{
      jj_consume_token(tboolean);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tboolean";       nodo.hijos.add(nodo2);
      break;
      }
    case tcaracter:{
      jj_consume_token(tcaracter);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcaracter";      nodo.hijos.add(nodo2);
      break;
      }
    case tcadena:{
      jj_consume_token(tcadena);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcadena";        nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VARIABLE(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="VARIABLE";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case id:{
      NOMBRES(nodo);
      break;
      }
    case arreglo:{
      jj_consume_token(arreglo);
      NOMARREGLO(nodo);
      DIMENSION(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case igual:{
        ASIGNARREGLO(nodo);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NOMARREGLO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="NOMARREGLO";
        padre.hijos.add(nodo);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      NOMARR(nodo);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  final public void NOMARR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="NOMARR";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      NOMARR(nodo);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void DIMENSION(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="DIMENSION";
        padre.hijos.add(nodo);
    jj_consume_token(corchetei);
    VALOR(nodo);
    jj_consume_token(corcheted);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case corchetei:{
      DIMENSION(nodo);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void ASIGNARREGLO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="ASIGNARREGLO";
        padre.hijos.add(nodo);
    jj_consume_token(igual);
    VALORARREGLO(nodo);
  }

  final public void VALORARREGLO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="VALORARREGLO";
        padre.hijos.add(nodo);
    jj_consume_token(llavei);
    VALARR(nodo);
    jj_consume_token(llaved);
  }

  final public void VALARR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="VALARR";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case nulo:
    case not:
    case parenti:
    case ordenar:
    case sumarizar:
    case id:{
      R2(nodo);
      break;
      }
    case llavei:{
      jj_consume_token(llavei);
      VALARR(nodo);
      jj_consume_token(llaved);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        LVAL2(nodo);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void R2(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="R2";
        padre.hijos.add(nodo);
    VALOR(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      LVAL(nodo);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void LVAL(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="LVAL";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    VALOR(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      LVAL(nodo);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void LVAL2(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="LVAL2";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    jj_consume_token(llavei);
    VALARR(nodo);
    jj_consume_token(llaved);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      LVAL2(nodo);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void NOMBRES(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="NOMBRES";
        padre.hijos.add(nodo);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igual:{
      ASIGN(nodo);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      NOM(nodo);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void NOM(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="NOM";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igual:{
      ASIGN(nodo);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      NOM(nodo);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void ASIGN(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="ASIGN";
        padre.hijos.add(nodo);
    jj_consume_token(igual);
    VALOR(nodo);
  }

  final public void VALOR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="VALOR";
        padre.hijos.add(nodo);
    LOGICA(nodo);
  }

  final public void CONT2(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CONT2";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case aumento:{
      jj_consume_token(aumento);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="++"; nodo.hijos.add(nodo2);
      break;
      }
    case decremento:{
      jj_consume_token(decremento);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="--"; nodo.hijos.add(nodo2);
      break;
      }
    case sumasim:{
      jj_consume_token(sumasim);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="+="; nodo.hijos.add(nodo2);
      break;
      }
    case restasim:{
      jj_consume_token(restasim);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="-="; nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//----------------CALCULADORA
  final public void C(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="C";
        padre.hijos.add(nodo);
    E(nodo);
  }

  final public void E(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="E";
        padre.hijos.add(nodo);
    T(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mas:
    case menos:{
      EP(nodo);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void EP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="EP";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mas:{
      jj_consume_token(mas);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="+"; nodo.hijos.add(nodo2);
      T(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mas:
      case menos:{
        EP(nodo);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
      }
    case menos:{
      jj_consume_token(menos);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="-"; nodo.hijos.add(nodo2);
      T(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mas:
      case menos:{
        EP(nodo);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void T(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="T";
        padre.hijos.add(nodo);
    F(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case por:
    case div:{
      TP(nodo);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  final public void TP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="TP";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case por:{
      jj_consume_token(por);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="*"; nodo.hijos.add(nodo2);
      F(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case por:
      case div:{
        TP(nodo);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
      }
    case div:{
      jj_consume_token(div);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="/"; nodo.hijos.add(nodo2);
      F(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case por:
      case div:{
        TP(nodo);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void F(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="F";
        padre.hijos.add(nodo);
    G(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case potencia:{
      FP(nodo);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

  final public void FP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="FP";
        padre.hijos.add(nodo);
    jj_consume_token(potencia);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="^"; nodo.hijos.add(nodo2);
    G(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case potencia:{
      FP(nodo);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  final public void G(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="G";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:{
      jj_consume_token(entero);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="entero";         nodo.hijos.add(nodo2);
      break;
      }
    case doble:{
      jj_consume_token(doble);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="doble";  nodo.hijos.add(nodo2);
      break;
      }
    case booleano:{
      jj_consume_token(booleano);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="boolean"; nodo.hijos.add(nodo2);
      break;
      }
    case caracter:{
      jj_consume_token(caracter);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="caracter";nodo.hijos.add(nodo2);
      break;
      }
    case cadena:{
      jj_consume_token(cadena);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="cadena";         nodo.hijos.add(nodo2);
      break;
      }
    case id:{
      jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo2.ty="id";             nodo.hijos.add(nodo2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case aumento:
      case decremento:
      case sumasim:
      case restasim:
      case corchetei:
      case parenti:{
        HH(nodo);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
      }
    case ordenar:{
      ORDEN(nodo);
      break;
      }
    case sumarizar:{
      SUMARI(nodo);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void HH(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="HH";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case corchetei:{
      DIMENSION(nodo);
      break;
      }
    case parenti:{
      jj_consume_token(parenti);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case entero:
      case doble:
      case booleano:
      case caracter:
      case cadena:
      case tentero:
      case tdoble:
      case tcaracter:
      case tboolean:
      case tcadena:
      case nulo:
      case not:
      case parenti:
      case ordenar:
      case sumarizar:
      case id:{
        PARAMETROS(nodo);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(parentd);
      break;
      }
    case aumento:
    case decremento:
    case sumasim:
    case restasim:{
      CONT2(nodo);
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//-----------------RELACIONAL
  final public void RELACIONAL(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="RELACIONAL";
        padre.hijos.add(nodo);
    A(nodo);
  }

  final public void A(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="A";
        padre.hijos.add(nodo);
    EXP(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igualacion:
    case diferenciacion:
    case menorque:
    case menorigualque:
    case mayorque:
    case mayorigualque:{
      AP(nodo);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
  }

  final public void AP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="AP";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igualacion:{
      jj_consume_token(igualacion);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="=="; nodo.hijos.add(nodo2);
      EXP(nodo);
      break;
      }
    case diferenciacion:{
      jj_consume_token(diferenciacion);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="!="; nodo.hijos.add(nodo2);
      EXP(nodo);
      break;
      }
    case menorque:{
      jj_consume_token(menorque);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="<"; nodo.hijos.add(nodo2);
      EXP(nodo);
      break;
      }
    case menorigualque:{
      jj_consume_token(menorigualque);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="<="; nodo.hijos.add(nodo2);
      EXP(nodo);
      break;
      }
    case mayorque:{
      jj_consume_token(mayorque);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=">"; nodo.hijos.add(nodo2);
      EXP(nodo);
      break;
      }
    case mayorigualque:{
      jj_consume_token(mayorigualque);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=">="; nodo.hijos.add(nodo2);
      EXP(nodo);
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EXP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="EXP";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case nulo:{
      jj_consume_token(nulo);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="!\u00c2\u00a1"; nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    E(nodo);
  }

//-------------------LOGICA
  final public void LOGICA(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="LOGICA";
        padre.hijos.add(nodo);
    L(nodo);
  }

  final public void L(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="L";
        padre.hijos.add(nodo);
    M(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case or:
    case nor:
    case xor:{
      LP(nodo);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
  }

  final public void LP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="LP";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case or:{
      jj_consume_token(or);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="||"; nodo.hijos.add(nodo2);
      M(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case or:
      case nor:
      case xor:{
        LP(nodo);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
      }
    case nor:{
      jj_consume_token(nor);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="!||"; nodo.hijos.add(nodo2);
      M(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case or:
      case nor:
      case xor:{
        LP(nodo);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      break;
      }
    case xor:{
      jj_consume_token(xor);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="&|"; nodo.hijos.add(nodo2);
      M(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case or:
      case nor:
      case xor:{
        LP(nodo);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void M(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="M";
        padre.hijos.add(nodo);
    N(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:
    case nand:{
      MP(nodo);
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
  }

  final public void MP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="MP";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      jj_consume_token(and);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="&&"; nodo.hijos.add(nodo2);
      N(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case and:
      case nand:{
        MP(nodo);
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      break;
      }
    case nand:{
      jj_consume_token(nand);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="!&&"; nodo.hijos.add(nodo2);
      N(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case and:
      case nand:{
        MP(nodo);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void N(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="N";
        padre.hijos.add(nodo);
    R(nodo);
  }

/*
void NP(NodoArbol padre):
{
	NodoArbol nodo = new NodoArbol();
	nodo.grafoname=getEtiqueta(); nodo.cadena="NP";
	padre.hijos.add(nodo);
}
{
	R(nodo) (NP(nodo))?
}
*/
//LA PARTE DE DECLARACION NO SE HA COMPLETADO
//LA PARTE DEL CONT2 NO SE HA COMPLETADO
  final public 
void R(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="R";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="!"; nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    Z(nodo);
  }

  final public void Z(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="Z";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case nulo:
    case ordenar:
    case sumarizar:
    case id:{
      RELACIONAL(nodo);
      break;
      }
    case parenti:{
      jj_consume_token(parenti);
      LOGICA(nodo);
      jj_consume_token(parentd);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//SENTENCIAS DE CONTROL
  final public void SENSI(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENSI";
        padre.hijos.add(nodo);
    jj_consume_token(si);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="si"; nodo.hijos.add(nodo2);
    jj_consume_token(parenti);
    LOGICA(nodo);
    jj_consume_token(parentd);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case sino:{
      SENSINO(nodo);
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      ;
    }
  }

  final public void SENSINO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENSINO";
        padre.hijos.add(nodo);
    jj_consume_token(sino);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="sino"; nodo.hijos.add(nodo2);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
  }

  final public void SENCOMPROBAR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENCOMPROBAR";
        padre.hijos.add(nodo);
    jj_consume_token(comprobar);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="comprobar"; nodo.hijos.add(nodo2);
    jj_consume_token(parenti);
    VALOR(nodo);
    jj_consume_token(parentd);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case caso:{
      CUERPO(nodo);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case defecto:{
      DEFE(nodo);
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
  }

  final public void CUERPO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CUERPO";
        padre.hijos.add(nodo);
    jj_consume_token(caso);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="caso"; nodo.hijos.add(nodo2);
    VALOR(nodo);
    jj_consume_token(dospuntos);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case caso:{
      CUERPO(nodo);
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      ;
    }
  }

  final public void SENSALIR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENSALIR";
        padre.hijos.add(nodo);
    jj_consume_token(salir);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="salir"; nodo.hijos.add(nodo2);
    jj_consume_token(dolar);
  }

  final public void DEFE(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="DEFE";
        padre.hijos.add(nodo);
    jj_consume_token(defecto);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="defecto"; nodo.hijos.add(nodo2);
    jj_consume_token(dospuntos);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      ;
    }
  }

  final public void SENPARA(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        NodoArbol nodo3 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENPARA";
        padre.hijos.add(nodo);
    jj_consume_token(para);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="para"; nodo.hijos.add(nodo2);
    jj_consume_token(parenti);
    INIPARA(nodo);
    jj_consume_token(puntoycoma);
    LOGICA(nodo);
    jj_consume_token(puntoycoma);
    jj_consume_token(id);
nodo3.grafoname=getEtiqueta(); nodo3.cadena=token.image; nodo3.f=token.beginLine; nodo3.c=token.beginColumn; nodo.hijos.add(nodo3);
    FINPARA(nodo);
    jj_consume_token(parentd);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
  }

  final public void INIPARA(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="INIPARA";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case var:{
      DECLARACION(nodo);
      break;
      }
    case id:{
      jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case corchetei:{
        DIMENSION(nodo);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case igual:{
        ASIGN(nodo);
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      break;
      }
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:{
      TIPO(nodo);
      jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
      jj_consume_token(igual);
      VALOR(nodo);
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FINPARA(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="FINPARA";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case igual:{
      jj_consume_token(igual);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="="; nodo.hijos.add(nodo2);
      VALOR(nodo);
      break;
      }
    case aumento:
    case decremento:
    case sumasim:
    case restasim:{
      CONT2(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case entero:
      case doble:
      case booleano:
      case caracter:
      case cadena:
      case nulo:
      case not:
      case parenti:
      case ordenar:
      case sumarizar:
      case id:{
        VALOR(nodo);
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SENMIENTRAS(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENMIENTRAS";
        padre.hijos.add(nodo);
    jj_consume_token(mientras);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="mientras"; nodo.hijos.add(nodo2);
    jj_consume_token(parenti);
    LOGICA(nodo);
    jj_consume_token(parentd);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
  }

  final public void SENHACER(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENHACER";
        padre.hijos.add(nodo);
    jj_consume_token(hacer);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="hacer"; nodo.hijos.add(nodo2);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
    jj_consume_token(mientras);
    jj_consume_token(parenti);
    LOGICA(nodo);
    jj_consume_token(parentd);
    jj_consume_token(dolar);
  }

  final public void SENCONTINUAR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SENCONTINUAR";
        padre.hijos.add(nodo);
    jj_consume_token(continuar);
    jj_consume_token(dolar);
  }

  final public void CONTENIDO3(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CONTENIDO3";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case tvoid:{
      TIPOMETODO(nodo);
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case corchetei:{
      DIMENSION(nodo);
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    METODO(nodo);
  }

  final public void TIPOMETODO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="TIPOMETODO";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tentero:{
      jj_consume_token(tentero);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tentero"; nodo.hijos.add(nodo2);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case corchetei:{
          ;
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          break label_3;
        }
        jj_consume_token(corchetei);
        jj_consume_token(corcheted);
NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3);
      }
      break;
      }
    case tdoble:{
      jj_consume_token(tdoble);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tdoble"; nodo.hijos.add(nodo2);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case corchetei:{
          ;
          break;
          }
        default:
          jj_la1[77] = jj_gen;
          break label_4;
        }
        jj_consume_token(corchetei);
        jj_consume_token(corcheted);
NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3);
      }
      break;
      }
    case tboolean:{
      jj_consume_token(tboolean);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tboolean"; nodo.hijos.add(nodo2);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case corchetei:{
          ;
          break;
          }
        default:
          jj_la1[78] = jj_gen;
          break label_5;
        }
        jj_consume_token(corchetei);
        jj_consume_token(corcheted);
NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3);
      }
      break;
      }
    case tcaracter:{
      jj_consume_token(tcaracter);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcaracter"; nodo.hijos.add(nodo2);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case corchetei:{
          ;
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          break label_6;
        }
        jj_consume_token(corchetei);
        jj_consume_token(corcheted);
NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3);
      }
      break;
      }
    case tcadena:{
      jj_consume_token(tcadena);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tcadena"; nodo.hijos.add(nodo2);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case corchetei:{
          ;
          break;
          }
        default:
          jj_la1[80] = jj_gen;
          break label_7;
        }
        jj_consume_token(corchetei);
        jj_consume_token(corcheted);
NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3);
      }
      break;
      }
    case tvoid:{
      jj_consume_token(tvoid);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="tvoid"; nodo.hijos.add(nodo2);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case corchetei:{
          ;
          break;
          }
        default:
          jj_la1[81] = jj_gen;
          break label_8;
        }
        jj_consume_token(corchetei);
        jj_consume_token(corcheted);
NodoArbol nodo3 = new NodoArbol(); nodo3.grafoname=getEtiqueta(); nodo3.cadena="[]"; nodo.hijos.add(nodo3);
      }
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void METODO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="METODO";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case parenti:{
      jj_consume_token(parenti);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case entero:
      case doble:
      case booleano:
      case caracter:
      case cadena:
      case tentero:
      case tdoble:
      case tcaracter:
      case tboolean:
      case tcadena:
      case nulo:
      case not:
      case parenti:
      case ordenar:
      case sumarizar:
      case id:{
        PARAMETROS(nodo);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      jj_consume_token(parentd);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case dolar:
      case sigabrir:{
        METOD(nodo);
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      break;
      }
    case igual:{
      jj_consume_token(igual);
      VALOR(nodo);
      jj_consume_token(dolar);
      break;
      }
    case aumento:
    case decremento:
    case sumasim:
    case restasim:{
      CONT2(nodo);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case entero:
      case doble:
      case booleano:
      case caracter:
      case cadena:
      case nulo:
      case not:
      case parenti:
      case ordenar:
      case sumarizar:
      case id:{
        VALOR(nodo);
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      jj_consume_token(dolar);
      break;
      }
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void METOD(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="METOD";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case sigabrir:{
      jj_consume_token(sigabrir);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comentario:
      case comentarioall:
      case tentero:
      case tdoble:
      case tcaracter:
      case tboolean:
      case tcadena:
      case conservar:
      case publico:
      case privado:
      case protegido:
      case var:
      case si:
      case comprobar:
      case salir:
      case para:
      case mientras:
      case hacer:
      case continuar:
      case tvoid:
      case retorna:
      case pintarP:
      case pintarOR:
      case pintarS:
      case principal:
      case ordenar:
      case sumarizar:
      case id:{
        SENTENCIAS(nodo);
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      jj_consume_token(sigcerrar);
      break;
      }
    case dolar:{
      jj_consume_token(dolar);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="dolar"; nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LISTPARAMETRO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="LISTPARAMETRO";
        padre.hijos.add(nodo);
    VALOR(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      LISTPARAMETRO2(nodo);
      break;
      }
    default:
      jj_la1[89] = jj_gen;
      ;
    }
  }

  final public void LISTPARAMETRO2(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="LISTPARAMETRO2";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    VALOR(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      LISTPARAMETRO2(nodo);
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      ;
    }
  }

  final public void RETO(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="RETO";
        padre.hijos.add(nodo);
    jj_consume_token(retorna);
    VALOR(nodo);
    jj_consume_token(dolar);
  }

  final public void PARAMETROS(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="PARAMETROS";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:{
      TIPO(nodo);
      jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        PARAP(nodo);
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      break;
      }
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case nulo:
    case not:
    case parenti:
    case ordenar:
    case sumarizar:
    case id:{
      LISTPARAMETRO(nodo);
      break;
      }
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PARAP(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="PARAP";
        padre.hijos.add(nodo);
    jj_consume_token(coma);
    TIPO(nodo);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case coma:{
      PARAP(nodo);
      break;
      }
    default:
      jj_la1[93] = jj_gen;
      ;
    }
  }

//----------------------METODOS NATIVOS DEL LENGUAJE
  final public 
void DIBUJAR_P(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="DIBUJAR_P";
        padre.hijos.add(nodo);
    jj_consume_token(pintarP);
    jj_consume_token(parenti);
    C(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(coma);
    COLOR(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(parentd);
    jj_consume_token(dolar);
  }

  final public void DIBUJAR_OR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="DIBUJAR_OR";
        padre.hijos.add(nodo);
    jj_consume_token(pintarOR);
    jj_consume_token(parenti);
    C(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(coma);
    COLOR(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(parentd);
    jj_consume_token(dolar);
  }

  final public void DIBUJAR_S(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="DIBUJAR_S";
        padre.hijos.add(nodo);
    jj_consume_token(pintarS);
    jj_consume_token(parenti);
    C(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(coma);
    COLOR(nodo);
    jj_consume_token(coma);
    C(nodo);
    jj_consume_token(parentd);
    jj_consume_token(dolar);
  }

  final public void COLOR(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="COLOR";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case caracter:
    case cadena:
    case ordenar:
    case sumarizar:
    case id:{
      C(nodo);
      break;
      }
    case colore:{
      jj_consume_token(colore);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PRI(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="PRI";
        padre.hijos.add(nodo);
    jj_consume_token(principal);
    jj_consume_token(parenti);
    jj_consume_token(parentd);
    jj_consume_token(sigabrir);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comentario:
    case comentarioall:
    case tentero:
    case tdoble:
    case tcaracter:
    case tboolean:
    case tcadena:
    case conservar:
    case publico:
    case privado:
    case protegido:
    case var:
    case si:
    case comprobar:
    case salir:
    case para:
    case mientras:
    case hacer:
    case continuar:
    case tvoid:
    case retorna:
    case pintarP:
    case pintarOR:
    case pintarS:
    case principal:
    case ordenar:
    case sumarizar:
    case id:{
      SENTENCIAS(nodo);
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    jj_consume_token(sigcerrar);
  }

  final public void ORDEN(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="ORDEN";
        padre.hijos.add(nodo);
    jj_consume_token(ordenar);
    jj_consume_token(parenti);
    jj_consume_token(arreglo);
    jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
    jj_consume_token(coma);
    jj_consume_token(tipo);
    FORMAORDEN(nodo);
    jj_consume_token(parentd);
  }

  final public void FORMAORDEN(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="FORMAORDEN";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ascendente:{
      jj_consume_token(ascendente);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="ascendente";      nodo.hijos.add(nodo2);
      break;
      }
    case descendente:{
      jj_consume_token(descendente);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="descendente"; nodo.hijos.add(nodo2);
      break;
      }
    case pares:{
      jj_consume_token(pares);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="pares";           nodo.hijos.add(nodo2);
      break;
      }
    case impares:{
      jj_consume_token(impares);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="impares";         nodo.hijos.add(nodo2);
      break;
      }
    case primos:{
      jj_consume_token(primos);
nodo2.grafoname=getEtiqueta(); nodo2.cadena="primos";          nodo.hijos.add(nodo2);
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SUMARI(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="SUMARI";
        padre.hijos.add(nodo);
    jj_consume_token(sumarizar);
    jj_consume_token(parenti);
    CONT5(nodo);
    jj_consume_token(parentd);
  }

  final public void CONT5(NodoArbol padre) throws ParseException {NodoArbol nodo = new NodoArbol();
        NodoArbol nodo2 = new NodoArbol();
        nodo.grafoname=getEtiqueta(); nodo.cadena="CONT5";
        padre.hijos.add(nodo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case id:{
      jj_consume_token(id);
nodo2.grafoname=getEtiqueta(); nodo2.cadena=token.image; nodo2.f=token.beginLine; nodo2.c=token.beginColumn; nodo.hijos.add(nodo2);
      break;
      }
    case llavei:{
      VALORARREGLO(nodo);
      break;
      }
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public compiladorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[98];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x0,0x0,0x1f1800,0x1800,0x1800,0x0,0x0,0x0,0x1f1800,0x1f1800,0x0,0x0,0x1f0000,0x1f0000,0x0,0x0,0x0,0x0,0x0,0x0,0xc0007c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c0,0xc1f07c0,0x0,0xf0000000,0xf0000000,0x4000000,0x3200000,0x3200000,0x3200000,0x3200000,0x3200000,0xc00000,0xc00000,0xc00000,0xc00000,0x8000000,0x40007c0,0x1f1800,0x0,0x1f1800,0x0,0x0,0x1f1800,0x0,0x1f1800,0x1f1800,0x0,0x0,0x1f0000,0xc0007c0,0x0,0x1f1800,0x1f1800,0x1f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f0000,0xc1f07c0,0x6000,0xc0007c0,0x0,0x1f1800,0x6000,0x0,0x0,0x0,0xc1f07c0,0x0,0x7c0,0x1f1800,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7000,0x100,0x2800f200,0x0,0x0,0x7000,0x400,0x400,0x2800f200,0x2800f200,0x200,0x7000,0x8000,0x0,0x800,0x100000,0x400,0x400,0x200000,0x400,0x2800000,0x400,0x400,0x400,0x800,0x400,0x800,0x400,0xf0000,0xc,0xc,0xc,0xc,0x30,0x30,0x30,0x30,0x40,0x40,0xaf0000,0x0,0x800000,0xaf0000,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x2800f200,0x10000000,0x2800f200,0x40000000,0x0,0x2800f200,0x40000000,0x2800f200,0x2800f200,0x200000,0x800,0x8000,0x800000,0xf0800,0x2800f200,0x2800f200,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x800000,0x0,0x800000,0x8f0800,0x2800f200,0x0,0x400,0x400,0x400,0x800000,0x400,0x0,0x2800f200,0x0,0x2000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x417fea,0x0,0x0,0x0,0x0,0x0,0x417fea,0x417fea,0x0,0x0,0x400100,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x414000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x414000,0x414000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x414000,0x417fea,0x0,0x417fea,0x0,0x4,0x417fea,0x0,0x417fea,0x417fea,0x0,0x0,0x400000,0x414000,0x0,0x417fea,0x417fea,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x414000,0x0,0x414000,0x0,0x417fea,0x0,0x0,0x0,0x0,0x414000,0x0,0xc14000,0x417fea,0x3e0000,0x400000,};
   }

  /** Constructor with InputStream. */
  public compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compilador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public compilador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public compilador(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[88];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 98; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 88; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
