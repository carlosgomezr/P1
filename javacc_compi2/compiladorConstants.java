/* Generated By:JavaCC: Do not edit this line. compiladorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface compiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int entero = 6;
  /** RegularExpression Id. */
  int doble = 7;
  /** RegularExpression Id. */
  int booleano = 8;
  /** RegularExpression Id. */
  int caracter = 9;
  /** RegularExpression Id. */
  int cadena = 10;
  /** RegularExpression Id. */
  int id = 11;
  /** RegularExpression Id. */
  int comentario = 12;
  /** RegularExpression Id. */
  int comentarioall = 13;
  /** RegularExpression Id. */
  int dolar = 14;
  /** RegularExpression Id. */
  int sigabrir = 15;
  /** RegularExpression Id. */
  int sigcerrar = 16;
  /** RegularExpression Id. */
  int tentero = 17;
  /** RegularExpression Id. */
  int tdoble = 18;
  /** RegularExpression Id. */
  int tcaracter = 19;
  /** RegularExpression Id. */
  int tboolean = 20;
  /** RegularExpression Id. */
  int tcadena = 21;
  /** RegularExpression Id. */
  int igualacion = 22;
  /** RegularExpression Id. */
  int diferenciacion = 23;
  /** RegularExpression Id. */
  int menorque = 24;
  /** RegularExpression Id. */
  int menorigualque = 25;
  /** RegularExpression Id. */
  int mayorque = 26;
  /** RegularExpression Id. */
  int mayorigualque = 27;
  /** RegularExpression Id. */
  int nulo = 28;
  /** RegularExpression Id. */
  int or = 29;
  /** RegularExpression Id. */
  int and = 30;
  /** RegularExpression Id. */
  int nand = 31;
  /** RegularExpression Id. */
  int nor = 32;
  /** RegularExpression Id. */
  int xor = 33;
  /** RegularExpression Id. */
  int not = 34;
  /** RegularExpression Id. */
  int mas = 35;
  /** RegularExpression Id. */
  int menos = 36;
  /** RegularExpression Id. */
  int por = 37;
  /** RegularExpression Id. */
  int div = 38;
  /** RegularExpression Id. */
  int potencia = 39;
  /** RegularExpression Id. */
  int lienzo = 40;
  /** RegularExpression Id. */
  int extiende = 41;
  /** RegularExpression Id. */
  int conservar = 42;
  /** RegularExpression Id. */
  int coma = 43;
  /** RegularExpression Id. */
  int igual = 44;
  /** RegularExpression Id. */
  int publico = 45;
  /** RegularExpression Id. */
  int privado = 46;
  /** RegularExpression Id. */
  int protegido = 47;
  /** RegularExpression Id. */
  int var = 48;
  /** RegularExpression Id. */
  int aumento = 49;
  /** RegularExpression Id. */
  int decremento = 50;
  /** RegularExpression Id. */
  int sumasim = 51;
  /** RegularExpression Id. */
  int restasim = 52;
  /** RegularExpression Id. */
  int arreglo = 53;
  /** RegularExpression Id. */
  int corchetei = 54;
  /** RegularExpression Id. */
  int corcheted = 55;
  /** RegularExpression Id. */
  int parenti = 56;
  /** RegularExpression Id. */
  int parentd = 57;
  /** RegularExpression Id. */
  int llavei = 58;
  /** RegularExpression Id. */
  int llaved = 59;
  /** RegularExpression Id. */
  int si = 60;
  /** RegularExpression Id. */
  int sino = 61;
  /** RegularExpression Id. */
  int comprobar = 62;
  /** RegularExpression Id. */
  int caso = 63;
  /** RegularExpression Id. */
  int valor = 64;
  /** RegularExpression Id. */
  int dospuntos = 65;
  /** RegularExpression Id. */
  int salir = 66;
  /** RegularExpression Id. */
  int defecto = 67;
  /** RegularExpression Id. */
  int para = 68;
  /** RegularExpression Id. */
  int puntoycoma = 69;
  /** RegularExpression Id. */
  int mientras = 70;
  /** RegularExpression Id. */
  int hacer = 71;
  /** RegularExpression Id. */
  int continuar = 72;
  /** RegularExpression Id. */
  int pintarP = 73;
  /** RegularExpression Id. */
  int pintarOR = 74;
  /** RegularExpression Id. */
  int pintarS = 75;
  /** RegularExpression Id. */
  int principal = 76;
  /** RegularExpression Id. */
  int ordenar = 77;
  /** RegularExpression Id. */
  int sumarizar = 78;
  /** RegularExpression Id. */
  int ascendente = 79;
  /** RegularExpression Id. */
  int descendente = 80;
  /** RegularExpression Id. */
  int pares = 81;
  /** RegularExpression Id. */
  int impares = 82;
  /** RegularExpression Id. */
  int primos = 83;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "<entero>",
    "<doble>",
    "<booleano>",
    "<caracter>",
    "<cadena>",
    "<id>",
    "<comentario>",
    "<comentarioall>",
    "\"$\"",
    "\"\\u00c2\\u00bf\"",
    "\"?\"",
    "<tentero>",
    "<tdoble>",
    "<tcaracter>",
    "<tboolean>",
    "<tcadena>",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!&\\u00c2\\u00a1\"",
    "\"||\"",
    "\"&&\"",
    "\"!&&\"",
    "\"!||\"",
    "\"&|\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "<lienzo>",
    "<extiende>",
    "<conservar>",
    "\",\"",
    "\"=\"",
    "<publico>",
    "<privado>",
    "<protegido>",
    "<var>",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "<arreglo>",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<si>",
    "<sino>",
    "<comprobar>",
    "<caso>",
    "<valor>",
    "\":\"",
    "<salir>",
    "<defecto>",
    "<para>",
    "\";\"",
    "<mientras>",
    "<hacer>",
    "<continuar>",
    "<pintarP>",
    "<pintarOR>",
    "<pintarS>",
    "<principal>",
    "<ordenar>",
    "<sumarizar>",
    "<ascendente>",
    "<descendente>",
    "<pares>",
    "<impares>",
    "<primos>",
  };

}
